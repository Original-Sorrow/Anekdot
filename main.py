import logging
from aiogram import Bot, Dispatcher, executor, types
from config import BOT_TOKEN, admin
import keyboard as kb
import functions as func
import sqlite3
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils.exceptions import Throttled
from anekdot import ANEKDOT 
import random 


storage = MemoryStorage()
logging.basicConfig(level=logging.INFO)
bot = Bot(BOT_TOKEN)
dp = Dispatcher(bot)
connection = sqlite3.connect('data.db')
q = connection.cursor()

class st(StatesGroup):

	item = State()

@dp.message_handler(commands=['start'])

async def start(message: types.Message):

	func.join(chat_id=message.chat.id)
	if message.chat.id == admin:
		await message.answer('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å.', reply_markup=kb.menu)
	else:
		await message.answer('–ü—Ä–∏–≤–µ—Ç!üëã\n–Ø-–±–æ—Ç –∞–Ω–µ–∫–¥–æ—Ç üòú, –Ω–∞–∂–∏–º–∞–π –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ —è —Å–∫–∏–Ω—É –∞–Ω–µ–∫–¥–æ—Ç.', reply_markup=kb.anek)



@dp.message_handler(content_types=['text'], text='–ê–Ω–µ–∫–¥–æ—Ç')

async def handfler(message: types.Message, state: FSMContext):

	func.join(chat_id=message.chat.id)
	await message.answer(random.choice(ANEKDOT))



@dp.message_handler(content_types=['text'], text='üëë –ê–¥–º–∏–Ω–∫–∞')

async def handfler(message: types.Message, state: FSMContext):

	func.join(chat_id=message.chat.id)

	if message.chat.id == admin:
		await message.answer('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å.', reply_markup=kb.adm)



@dp.message_handler(content_types=['text'], text='‚è™ –ù–∞–∑–∞–¥')

async def handledr(message: types.Message, state: FSMContext):

	await message.answer('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –£–±–ª—é–¥–æ–∫.', reply_markup=kb.menu)




@dp.message_handler(content_types=['text'], text='üí¨ –†–∞—Å—Å—ã–ª–∫–∞')
async def hangdler(message: types.Message, state: FSMContext):
	func.join(chat_id=message.chat.id)
	if message.chat.id == admin:
		await message.answer('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.\n\n–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏ –±–ª—è—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ', reply_markup=kb.back)
		await st.item.set()

@dp.message_handler(content_types=['text'])


@dp.message_handler(state=st.item)
async def process_name(message: types.Message, state: FSMContext):
	q.execute(f'SELECT user_id FROM users')
	row = q.fetchall()
	connection.commit()
	text = message.text
	if message.text == '‚è™ –û—Ç–º–µ–Ω–∞':
		await message.answer('–û—Ç–º–µ–Ω–∞! –í–æ–∑–≤—Ä–∞—â–∞—é –Ω–∞–∑–∞–¥.', reply_markup=kb.adm)
		await state.finish()
	else:
		info = row
		await message.answer('–†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞—Ç–∞!', reply_markup=kb.adm)
		for i in range(len(info)):
			try:
				await bot.send_message(info[i][0], str(text))
			except:
				pass
		await message.answer('–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!', reply_markup=kb.adm)
		await state.finish()

	await self.reset_state(chat=chat, user=user, with_data=True)
	
executor.start_polling(dp, skip_updates=True)
